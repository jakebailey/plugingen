// Code generated by "plugingen -type=Thinger -subpkg=exampleplug ."; DO NOT EDIT.

package exampleplug

import (
	goplugin "github.com/hashicorp/go-plugin"
	example "github.com/jakebailey/plugingen/example"
	"io"
	"log"
	"net/rpc"
)

// ThingerPlugin implements the Plugin interface for Thinger.
type ThingerPlugin struct {
	impl example.Thinger
}

func NewThingerPlugin(impl example.Thinger) *ThingerPlugin {
	return &ThingerPlugin{impl: impl}
}

var _ goplugin.Plugin = (*ThingerPlugin)(nil) // Compile-time check that ThingerPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *ThingerPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewThingerRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *ThingerPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewThingerRPCClient(b, c), nil
}

// ThingerRPCClient implements Thinger via net/rpc.
type ThingerRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewThingerRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *ThingerRPCClient {
	return &ThingerRPCClient{
		broker: b,
		client: c,
	}
}

var _ example.Thinger = (*ThingerRPCClient)(nil)

// ThingerRPCServer implements the net/rpc server for Thinger.
type ThingerRPCServer struct {
	broker *goplugin.MuxBroker
	impl   example.Thinger
}

func NewThingerRPCServer(b *goplugin.MuxBroker, impl example.Thinger) *ThingerRPCServer {
	return &ThingerRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Thinger_CopyParams contains parameters for the Copy function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_CopyParams struct {
	P0ID uint32
	P1ID uint32
}

// Z_Thinger_CopyResults contains results for the Copy function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_CopyResults struct {
	R0 int64
	R1 error
}

// Copy implements Copy for the Thinger interface.
func (c *ThingerRPCClient) Copy(p0 io.Writer, p1 io.Reader) (int64, error) {
	p0id := c.broker.NextId()
	go c.broker.AcceptAndServe(p0id, NewWriterRPCServer(c.broker, p0))

	p1id := c.broker.NextId()
	go c.broker.AcceptAndServe(p1id, NewReaderRPCServer(c.broker, p1))

	params := &Z_Thinger_CopyParams{
		P0ID: p0id,
		P1ID: p1id,
	}
	results := &Z_Thinger_CopyResults{}

	if err := c.client.Call("Plugin.Copy", params, results); err != nil {
		log.Println("RPC call to Thinger.Copy failed:", err.Error())
	}

	return results.R0, results.R1
}

// Copy implements the server side of net/rpc calls to Copy.
func (s *ThingerRPCServer) Copy(params *Z_Thinger_CopyParams, results *Z_Thinger_CopyResults) error {
	p0conn, err := s.broker.Dial(params.P0ID)
	if err != nil {
		return err
	}
	p0RPCClient := rpc.NewClient(p0conn)
	defer p0RPCClient.Close()
	p0client := NewWriterRPCClient(s.broker, p0RPCClient)

	p1conn, err := s.broker.Dial(params.P1ID)
	if err != nil {
		return err
	}
	p1RPCClient := rpc.NewClient(p1conn)
	defer p1RPCClient.Close()
	p1client := NewReaderRPCClient(s.broker, p1RPCClient)

	r0, r1 := s.impl.Copy(p0client, p1client)

	results.R0 = r0
	results.R1 = goplugin.NewBasicError(r1)

	return nil
}

// DoNothing implements DoNothing for the Thinger interface.
func (c *ThingerRPCClient) DoNothing() {
	params := new(interface{})
	results := new(interface{})

	if err := c.client.Call("Plugin.DoNothing", params, results); err != nil {
		log.Println("RPC call to Thinger.DoNothing failed:", err.Error())
	}
}

// DoNothing implements the server side of net/rpc calls to DoNothing.
func (s *ThingerRPCServer) DoNothing(_ interface{}, _ *interface{}) error {
	s.impl.DoNothing()

	return nil
}

// Z_Thinger_ErrorToErrorParams contains parameters for the ErrorToError function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ErrorToErrorParams struct {
	P0 error
}

// Z_Thinger_ErrorToErrorResults contains results for the ErrorToError function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ErrorToErrorResults struct {
	R0 error
}

// ErrorToError implements ErrorToError for the Thinger interface.
func (c *ThingerRPCClient) ErrorToError(p0 error) error {
	params := &Z_Thinger_ErrorToErrorParams{P0: goplugin.NewBasicError(p0)}
	results := &Z_Thinger_ErrorToErrorResults{}

	if err := c.client.Call("Plugin.ErrorToError", params, results); err != nil {
		log.Println("RPC call to Thinger.ErrorToError failed:", err.Error())
	}

	return results.R0
}

// ErrorToError implements the server side of net/rpc calls to ErrorToError.
func (s *ThingerRPCServer) ErrorToError(params *Z_Thinger_ErrorToErrorParams, results *Z_Thinger_ErrorToErrorResults) error {
	r0 := s.impl.ErrorToError(params.P0)

	results.R0 = goplugin.NewBasicError(r0)

	return nil
}

// Z_Thinger_IdentityParams contains parameters for the Identity function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_IdentityParams struct {
	P0 interface{}
}

// Z_Thinger_IdentityResults contains results for the Identity function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_IdentityResults struct {
	R0 interface{}
}

// Identity implements Identity for the Thinger interface.
func (c *ThingerRPCClient) Identity(p0 interface{}) interface{} {
	params := &Z_Thinger_IdentityParams{P0: p0}
	results := &Z_Thinger_IdentityResults{}

	if err := c.client.Call("Plugin.Identity", params, results); err != nil {
		log.Println("RPC call to Thinger.Identity failed:", err.Error())
	}

	return results.R0
}

// Identity implements the server side of net/rpc calls to Identity.
func (s *ThingerRPCServer) Identity(params *Z_Thinger_IdentityParams, results *Z_Thinger_IdentityResults) error {
	r0 := s.impl.Identity(params.P0)

	results.R0 = r0

	return nil
}

// Z_Thinger_ReplaceParams contains parameters for the Replace function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ReplaceParams struct {
	P0   string
	P1ID uint32
}

// Z_Thinger_ReplaceResults contains results for the Replace function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ReplaceResults struct {
	R0 string
}

// Replace implements Replace for the Thinger interface.
func (c *ThingerRPCClient) Replace(p0 string, p1 interface {
	Replace(string) string
}) string {
	p1id := c.broker.NextId()
	go c.broker.AcceptAndServe(p1id, NewZ_Interface0RPCServer(c.broker, p1))

	params := &Z_Thinger_ReplaceParams{
		P0:   p0,
		P1ID: p1id,
	}
	results := &Z_Thinger_ReplaceResults{}

	if err := c.client.Call("Plugin.Replace", params, results); err != nil {
		log.Println("RPC call to Thinger.Replace failed:", err.Error())
	}

	return results.R0
}

// Replace implements the server side of net/rpc calls to Replace.
func (s *ThingerRPCServer) Replace(params *Z_Thinger_ReplaceParams, results *Z_Thinger_ReplaceResults) error {
	p1conn, err := s.broker.Dial(params.P1ID)
	if err != nil {
		return err
	}
	p1RPCClient := rpc.NewClient(p1conn)
	defer p1RPCClient.Close()
	p1client := NewZ_Interface0RPCClient(s.broker, p1RPCClient)

	r0 := s.impl.Replace(params.P0, p1client)

	results.R0 = r0

	return nil
}

// Z_Thinger_StringResults contains results for the String function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_StringResults struct {
	R0 string
}

// String implements String for the Thinger interface.
func (c *ThingerRPCClient) String() string {
	params := new(interface{})
	results := &Z_Thinger_StringResults{}

	if err := c.client.Call("Plugin.String", params, results); err != nil {
		log.Println("RPC call to Thinger.String failed:", err.Error())
	}

	return results.R0
}

// String implements the server side of net/rpc calls to String.
func (s *ThingerRPCServer) String(_ interface{}, results *Z_Thinger_StringResults) error {
	r0 := s.impl.String()

	results.R0 = r0

	return nil
}

// Z_Thinger_SumParams contains parameters for the Sum function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_SumParams struct {
	P0 []int
}

// Z_Thinger_SumResults contains results for the Sum function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_SumResults struct {
	R0 int
}

// Sum implements Sum for the Thinger interface.
func (c *ThingerRPCClient) Sum(p0 ...int) int {
	params := &Z_Thinger_SumParams{P0: p0}
	results := &Z_Thinger_SumResults{}

	if err := c.client.Call("Plugin.Sum", params, results); err != nil {
		log.Println("RPC call to Thinger.Sum failed:", err.Error())
	}

	return results.R0
}

// Sum implements the server side of net/rpc calls to Sum.
func (s *ThingerRPCServer) Sum(params *Z_Thinger_SumParams, results *Z_Thinger_SumResults) error {
	r0 := s.impl.Sum(params.P0...)

	results.R0 = r0

	return nil
}

// Z_Interface0Plugin implements the Plugin interface for Z_Interface0.
type Z_Interface0Plugin struct {
	impl interface {
		Replace(string) string
	}
}

func NewZ_Interface0Plugin(impl interface {
	Replace(string) string
}) *Z_Interface0Plugin {
	return &Z_Interface0Plugin{impl: impl}
}

var _ goplugin.Plugin = (*Z_Interface0Plugin)(nil) // Compile-time check that Z_Interface0Plugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *Z_Interface0Plugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewZ_Interface0RPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *Z_Interface0Plugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewZ_Interface0RPCClient(b, c), nil
}

// Z_Interface0RPCClient implements Z_Interface0 via net/rpc.
type Z_Interface0RPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewZ_Interface0RPCClient(b *goplugin.MuxBroker, c *rpc.Client) *Z_Interface0RPCClient {
	return &Z_Interface0RPCClient{
		broker: b,
		client: c,
	}
}

var _ interface {
	Replace(string) string
} = (*Z_Interface0RPCClient)(nil)

// Z_Interface0RPCServer implements the net/rpc server for Z_Interface0.
type Z_Interface0RPCServer struct {
	broker *goplugin.MuxBroker
	impl   interface {
		Replace(string) string
	}
}

func NewZ_Interface0RPCServer(b *goplugin.MuxBroker, impl interface {
	Replace(string) string
}) *Z_Interface0RPCServer {
	return &Z_Interface0RPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Z_Interface0_ReplaceParams contains parameters for the Replace function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Z_Interface0_ReplaceParams struct {
	P0 string
}

// Z_Z_Interface0_ReplaceResults contains results for the Replace function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Z_Interface0_ReplaceResults struct {
	R0 string
}

// Replace implements Replace for the Z_Interface0 interface.
func (c *Z_Interface0RPCClient) Replace(p0 string) string {
	params := &Z_Z_Interface0_ReplaceParams{P0: p0}
	results := &Z_Z_Interface0_ReplaceResults{}

	if err := c.client.Call("Plugin.Replace", params, results); err != nil {
		log.Println("RPC call to Z_Interface0.Replace failed:", err.Error())
	}

	return results.R0
}

// Replace implements the server side of net/rpc calls to Replace.
func (s *Z_Interface0RPCServer) Replace(params *Z_Z_Interface0_ReplaceParams, results *Z_Z_Interface0_ReplaceResults) error {
	r0 := s.impl.Replace(params.P0)

	results.R0 = r0

	return nil
}

// ReaderPlugin implements the Plugin interface for Reader.
type ReaderPlugin struct {
	impl io.Reader
}

func NewReaderPlugin(impl io.Reader) *ReaderPlugin {
	return &ReaderPlugin{impl: impl}
}

var _ goplugin.Plugin = (*ReaderPlugin)(nil) // Compile-time check that ReaderPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *ReaderPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewReaderRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *ReaderPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewReaderRPCClient(b, c), nil
}

// ReaderRPCClient implements Reader via net/rpc.
type ReaderRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewReaderRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *ReaderRPCClient {
	return &ReaderRPCClient{
		broker: b,
		client: c,
	}
}

var _ io.Reader = (*ReaderRPCClient)(nil)

// ReaderRPCServer implements the net/rpc server for Reader.
type ReaderRPCServer struct {
	broker *goplugin.MuxBroker
	impl   io.Reader
}

func NewReaderRPCServer(b *goplugin.MuxBroker, impl io.Reader) *ReaderRPCServer {
	return &ReaderRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Reader_ReadParams contains parameters for the Read function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Reader_ReadParams struct {
	P0 []byte
}

// Z_Reader_ReadResults contains results for the Read function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Reader_ReadResults struct {
	R0 int
	R1 error
}

// Read implements Read for the Reader interface.
func (c *ReaderRPCClient) Read(p0 []byte) (int, error) {
	params := &Z_Reader_ReadParams{P0: p0}
	results := &Z_Reader_ReadResults{}

	if err := c.client.Call("Plugin.Read", params, results); err != nil {
		log.Println("RPC call to Reader.Read failed:", err.Error())
	}

	return results.R0, results.R1
}

// Read implements the server side of net/rpc calls to Read.
func (s *ReaderRPCServer) Read(params *Z_Reader_ReadParams, results *Z_Reader_ReadResults) error {
	r0, r1 := s.impl.Read(params.P0)

	results.R0 = r0
	results.R1 = goplugin.NewBasicError(r1)

	return nil
}

// WriterPlugin implements the Plugin interface for Writer.
type WriterPlugin struct {
	impl io.Writer
}

func NewWriterPlugin(impl io.Writer) *WriterPlugin {
	return &WriterPlugin{impl: impl}
}

var _ goplugin.Plugin = (*WriterPlugin)(nil) // Compile-time check that WriterPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *WriterPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewWriterRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *WriterPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewWriterRPCClient(b, c), nil
}

// WriterRPCClient implements Writer via net/rpc.
type WriterRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewWriterRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *WriterRPCClient {
	return &WriterRPCClient{
		broker: b,
		client: c,
	}
}

var _ io.Writer = (*WriterRPCClient)(nil)

// WriterRPCServer implements the net/rpc server for Writer.
type WriterRPCServer struct {
	broker *goplugin.MuxBroker
	impl   io.Writer
}

func NewWriterRPCServer(b *goplugin.MuxBroker, impl io.Writer) *WriterRPCServer {
	return &WriterRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Writer_WriteParams contains parameters for the Write function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Writer_WriteParams struct {
	P0 []byte
}

// Z_Writer_WriteResults contains results for the Write function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Writer_WriteResults struct {
	R0 int
	R1 error
}

// Write implements Write for the Writer interface.
func (c *WriterRPCClient) Write(p0 []byte) (int, error) {
	params := &Z_Writer_WriteParams{P0: p0}
	results := &Z_Writer_WriteResults{}

	if err := c.client.Call("Plugin.Write", params, results); err != nil {
		log.Println("RPC call to Writer.Write failed:", err.Error())
	}

	return results.R0, results.R1
}

// Write implements the server side of net/rpc calls to Write.
func (s *WriterRPCServer) Write(params *Z_Writer_WriteParams, results *Z_Writer_WriteResults) error {
	r0, r1 := s.impl.Write(params.P0)

	results.R0 = r0
	results.R1 = goplugin.NewBasicError(r1)

	return nil
}

// PluginHandshake is a plugin handshake generated from the input interfaces.
var PluginHandshake = goplugin.HandshakeConfig{
	MagicCookieKey:   "PLUGINGEN_MAGIC_COOKIE_KEY",
	MagicCookieValue: "ee2f63579676392f535cbdeb674657fc",
	ProtocolVersion:  1,
}
