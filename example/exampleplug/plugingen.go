// Code generated by "plugingen -type=Thinger -subpkg=exampleplug ."; DO NOT EDIT.

package exampleplug

import (
	"bytes"
	"fmt"
	goplugin "github.com/hashicorp/go-plugin"
	example "github.com/jakebailey/plugingen/example"
	"io"
	"log"
	"net/rpc"
)

// StringerPlugin implements the Plugin interface for Stringer.
type StringerPlugin struct {
	impl fmt.Stringer
}

func NewStringerPlugin(impl fmt.Stringer) *StringerPlugin {
	return &StringerPlugin{impl: impl}
}

var _ goplugin.Plugin = (*StringerPlugin)(nil) // Compile-time check that StringerPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *StringerPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewStringerRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *StringerPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewStringerRPCClient(b, c), nil
}

// StringerRPCClient implements Stringer via net/rpc.
type StringerRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewStringerRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *StringerRPCClient {
	return &StringerRPCClient{
		broker: b,
		client: c,
	}
}

var _ fmt.Stringer = (*StringerRPCClient)(nil)

// StringerRPCServer implements the net/rpc server for Stringer.
type StringerRPCServer struct {
	broker *goplugin.MuxBroker
	impl   fmt.Stringer
}

func NewStringerRPCServer(b *goplugin.MuxBroker, impl fmt.Stringer) *StringerRPCServer {
	return &StringerRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Stringer_StringResults contains results for the String function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Stringer_StringResults struct {
	R0 string
}

// String implements String for the Stringer interface.
func (c *StringerRPCClient) String() string {
	params := new(interface{})
	results := &Z_Stringer_StringResults{}

	if err := c.client.Call("Plugin.String", params, results); err != nil {
		log.Println("RPC call to Stringer.String failed:", err.Error())
	}

	return results.R0
}

// String implements the server side of net/rpc calls to String.
func (s *StringerRPCServer) String(_ interface{}, results *Z_Stringer_StringResults) error {
	r0 := s.impl.String()

	results.R0 = r0

	return nil
}

// ThingerPlugin implements the Plugin interface for Thinger.
type ThingerPlugin struct {
	impl example.Thinger
}

func NewThingerPlugin(impl example.Thinger) *ThingerPlugin {
	return &ThingerPlugin{impl: impl}
}

var _ goplugin.Plugin = (*ThingerPlugin)(nil) // Compile-time check that ThingerPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *ThingerPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewThingerRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *ThingerPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewThingerRPCClient(b, c), nil
}

// ThingerRPCClient implements Thinger via net/rpc.
type ThingerRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewThingerRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *ThingerRPCClient {
	return &ThingerRPCClient{
		broker: b,
		client: c,
	}
}

var _ example.Thinger = (*ThingerRPCClient)(nil)

// ThingerRPCServer implements the net/rpc server for Thinger.
type ThingerRPCServer struct {
	broker *goplugin.MuxBroker
	impl   example.Thinger
}

func NewThingerRPCServer(b *goplugin.MuxBroker, impl example.Thinger) *ThingerRPCServer {
	return &ThingerRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Thinger_DoubleParamsParams contains parameters for the DoubleParams function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_DoubleParamsParams struct {
	P0 int
	P1 int
}

// DoubleParams implements DoubleParams for the Thinger interface.
func (c *ThingerRPCClient) DoubleParams(p0 int, p1 int) {
	params := &Z_Thinger_DoubleParamsParams{
		P0: p0,
		P1: p1,
	}
	results := new(interface{})

	if err := c.client.Call("Plugin.DoubleParams", params, results); err != nil {
		log.Println("RPC call to Thinger.DoubleParams failed:", err.Error())
	}
}

// DoubleParams implements the server side of net/rpc calls to DoubleParams.
func (s *ThingerRPCServer) DoubleParams(params *Z_Thinger_DoubleParamsParams, _ *interface{}) error {
	s.impl.DoubleParams(params.P0, params.P1)

	return nil
}

// Z_Thinger_DoubleReturnsResults contains results for the DoubleReturns function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_DoubleReturnsResults struct {
	R0 string
	R1 string
}

// DoubleReturns implements DoubleReturns for the Thinger interface.
func (c *ThingerRPCClient) DoubleReturns() (string, string) {
	params := new(interface{})
	results := &Z_Thinger_DoubleReturnsResults{}

	if err := c.client.Call("Plugin.DoubleReturns", params, results); err != nil {
		log.Println("RPC call to Thinger.DoubleReturns failed:", err.Error())
	}

	return results.R0, results.R1
}

// DoubleReturns implements the server side of net/rpc calls to DoubleReturns.
func (s *ThingerRPCServer) DoubleReturns(_ interface{}, results *Z_Thinger_DoubleReturnsResults) error {
	r0, r1 := s.impl.DoubleReturns()

	results.R0 = r0
	results.R1 = r1

	return nil
}

// Z_Thinger_EmptyInterfaceParams contains parameters for the EmptyInterface function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_EmptyInterfaceParams struct {
	P0 interface{}
}

// Z_Thinger_EmptyInterfaceResults contains results for the EmptyInterface function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_EmptyInterfaceResults struct {
	R0 interface{}
}

// EmptyInterface implements EmptyInterface for the Thinger interface.
func (c *ThingerRPCClient) EmptyInterface(p0 interface{}) interface{} {
	params := &Z_Thinger_EmptyInterfaceParams{P0: p0}
	results := &Z_Thinger_EmptyInterfaceResults{}

	if err := c.client.Call("Plugin.EmptyInterface", params, results); err != nil {
		log.Println("RPC call to Thinger.EmptyInterface failed:", err.Error())
	}

	return results.R0
}

// EmptyInterface implements the server side of net/rpc calls to EmptyInterface.
func (s *ThingerRPCServer) EmptyInterface(params *Z_Thinger_EmptyInterfaceParams, results *Z_Thinger_EmptyInterfaceResults) error {
	r0 := s.impl.EmptyInterface(params.P0)

	results.R0 = r0

	return nil
}

// Z_Thinger_ErrReturnResults contains results for the ErrReturn function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ErrReturnResults struct {
	R0 int
	R1 error
}

// ErrReturn implements ErrReturn for the Thinger interface.
func (c *ThingerRPCClient) ErrReturn() (int, error) {
	params := new(interface{})
	results := &Z_Thinger_ErrReturnResults{}

	if err := c.client.Call("Plugin.ErrReturn", params, results); err != nil {
		log.Println("RPC call to Thinger.ErrReturn failed:", err.Error())
	}

	return results.R0, results.R1
}

// ErrReturn implements the server side of net/rpc calls to ErrReturn.
func (s *ThingerRPCServer) ErrReturn(_ interface{}, results *Z_Thinger_ErrReturnResults) error {
	r0, r1 := s.impl.ErrReturn()

	results.R0 = r0
	results.R1 = goplugin.NewBasicError(r1)

	return nil
}

// Z_Thinger_ErrorToErrorParams contains parameters for the ErrorToError function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ErrorToErrorParams struct {
	P0 error
}

// Z_Thinger_ErrorToErrorResults contains results for the ErrorToError function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ErrorToErrorResults struct {
	R0 error
}

// ErrorToError implements ErrorToError for the Thinger interface.
func (c *ThingerRPCClient) ErrorToError(p0 error) error {
	params := &Z_Thinger_ErrorToErrorParams{P0: goplugin.NewBasicError(p0)}
	results := &Z_Thinger_ErrorToErrorResults{}

	if err := c.client.Call("Plugin.ErrorToError", params, results); err != nil {
		log.Println("RPC call to Thinger.ErrorToError failed:", err.Error())
	}

	return results.R0
}

// ErrorToError implements the server side of net/rpc calls to ErrorToError.
func (s *ThingerRPCServer) ErrorToError(params *Z_Thinger_ErrorToErrorParams, results *Z_Thinger_ErrorToErrorResults) error {
	r0 := s.impl.ErrorToError(params.P0)

	results.R0 = goplugin.NewBasicError(r0)

	return nil
}

// Z_Thinger_ImportedParams contains parameters for the Imported function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ImportedParams struct {
	P0 bytes.Buffer
}

// Imported implements Imported for the Thinger interface.
func (c *ThingerRPCClient) Imported(p0 bytes.Buffer) {
	params := &Z_Thinger_ImportedParams{P0: p0}
	results := new(interface{})

	if err := c.client.Call("Plugin.Imported", params, results); err != nil {
		log.Println("RPC call to Thinger.Imported failed:", err.Error())
	}
}

// Imported implements the server side of net/rpc calls to Imported.
func (s *ThingerRPCServer) Imported(params *Z_Thinger_ImportedParams, _ *interface{}) error {
	s.impl.Imported(params.P0)

	return nil
}

// Z_Thinger_ImportedInterfaceParams contains parameters for the ImportedInterface function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_ImportedInterfaceParams struct {
	P0ID uint32
	P1ID uint32
}

// ImportedInterface implements ImportedInterface for the Thinger interface.
func (c *ThingerRPCClient) ImportedInterface(p0 io.Reader, p1 io.Writer) {
	p0id := c.broker.NextId()
	go c.broker.AcceptAndServe(p0id, NewReaderRPCServer(c.broker, p0))

	p1id := c.broker.NextId()
	go c.broker.AcceptAndServe(p1id, NewWriterRPCServer(c.broker, p1))

	params := &Z_Thinger_ImportedInterfaceParams{
		P0ID: p0id,
		P1ID: p1id,
	}
	results := new(interface{})

	if err := c.client.Call("Plugin.ImportedInterface", params, results); err != nil {
		log.Println("RPC call to Thinger.ImportedInterface failed:", err.Error())
	}
}

// ImportedInterface implements the server side of net/rpc calls to ImportedInterface.
func (s *ThingerRPCServer) ImportedInterface(params *Z_Thinger_ImportedInterfaceParams, _ *interface{}) error {
	p0conn, err := s.broker.Dial(params.P0ID)
	if err != nil {
		return err
	}
	p0RPCClient := rpc.NewClient(p0conn)
	defer p0RPCClient.Close()
	p0client := NewReaderRPCClient(s.broker, p0RPCClient)

	p1conn, err := s.broker.Dial(params.P1ID)
	if err != nil {
		return err
	}
	p1RPCClient := rpc.NewClient(p1conn)
	defer p1RPCClient.Close()
	p1client := NewWriterRPCClient(s.broker, p1RPCClient)

	s.impl.ImportedInterface(p0client, p1client)

	return nil
}

// Z_Thinger_InterfaceParamParams contains parameters for the InterfaceParam function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_InterfaceParamParams struct {
	P0ID uint32
}

// InterfaceParam implements InterfaceParam for the Thinger interface.
func (c *ThingerRPCClient) InterfaceParam(p0 fmt.Stringer) {
	p0id := c.broker.NextId()
	go c.broker.AcceptAndServe(p0id, NewStringerRPCServer(c.broker, p0))

	params := &Z_Thinger_InterfaceParamParams{P0ID: p0id}
	results := new(interface{})

	if err := c.client.Call("Plugin.InterfaceParam", params, results); err != nil {
		log.Println("RPC call to Thinger.InterfaceParam failed:", err.Error())
	}
}

// InterfaceParam implements the server side of net/rpc calls to InterfaceParam.
func (s *ThingerRPCServer) InterfaceParam(params *Z_Thinger_InterfaceParamParams, _ *interface{}) error {
	p0conn, err := s.broker.Dial(params.P0ID)
	if err != nil {
		return err
	}
	p0RPCClient := rpc.NewClient(p0conn)
	defer p0RPCClient.Close()
	p0client := NewStringerRPCClient(s.broker, p0RPCClient)

	s.impl.InterfaceParam(p0client)

	return nil
}

// Z_Thinger_LiteralParams contains parameters for the Literal function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_LiteralParams struct {
	P0ID uint32
}

// Literal implements Literal for the Thinger interface.
func (c *ThingerRPCClient) Literal(p0 interface {
	Replace(string) string
}) {
	p0id := c.broker.NextId()
	go c.broker.AcceptAndServe(p0id, NewZ_Interface0RPCServer(c.broker, p0))

	params := &Z_Thinger_LiteralParams{P0ID: p0id}
	results := new(interface{})

	if err := c.client.Call("Plugin.Literal", params, results); err != nil {
		log.Println("RPC call to Thinger.Literal failed:", err.Error())
	}
}

// Literal implements the server side of net/rpc calls to Literal.
func (s *ThingerRPCServer) Literal(params *Z_Thinger_LiteralParams, _ *interface{}) error {
	p0conn, err := s.broker.Dial(params.P0ID)
	if err != nil {
		return err
	}
	p0RPCClient := rpc.NewClient(p0conn)
	defer p0RPCClient.Close()
	p0client := NewZ_Interface0RPCClient(s.broker, p0RPCClient)

	s.impl.Literal(p0client)

	return nil
}

// Z_Thinger_OneArgParams contains parameters for the OneArg function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_OneArgParams struct {
	P0 int
}

// OneArg implements OneArg for the Thinger interface.
func (c *ThingerRPCClient) OneArg(p0 int) {
	params := &Z_Thinger_OneArgParams{P0: p0}
	results := new(interface{})

	if err := c.client.Call("Plugin.OneArg", params, results); err != nil {
		log.Println("RPC call to Thinger.OneArg failed:", err.Error())
	}
}

// OneArg implements the server side of net/rpc calls to OneArg.
func (s *ThingerRPCServer) OneArg(params *Z_Thinger_OneArgParams, _ *interface{}) error {
	s.impl.OneArg(params.P0)

	return nil
}

// Z_Thinger_OneArgOneReturnParams contains parameters for the OneArgOneReturn function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_OneArgOneReturnParams struct {
	P0 int
}

// Z_Thinger_OneArgOneReturnResults contains results for the OneArgOneReturn function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_OneArgOneReturnResults struct {
	R0 float32
}

// OneArgOneReturn implements OneArgOneReturn for the Thinger interface.
func (c *ThingerRPCClient) OneArgOneReturn(p0 int) float32 {
	params := &Z_Thinger_OneArgOneReturnParams{P0: p0}
	results := &Z_Thinger_OneArgOneReturnResults{}

	if err := c.client.Call("Plugin.OneArgOneReturn", params, results); err != nil {
		log.Println("RPC call to Thinger.OneArgOneReturn failed:", err.Error())
	}

	return results.R0
}

// OneArgOneReturn implements the server side of net/rpc calls to OneArgOneReturn.
func (s *ThingerRPCServer) OneArgOneReturn(params *Z_Thinger_OneArgOneReturnParams, results *Z_Thinger_OneArgOneReturnResults) error {
	r0 := s.impl.OneArgOneReturn(params.P0)

	results.R0 = r0

	return nil
}

// Z_Thinger_OneReturnResults contains results for the OneReturn function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_OneReturnResults struct {
	R0 int
}

// OneReturn implements OneReturn for the Thinger interface.
func (c *ThingerRPCClient) OneReturn() int {
	params := new(interface{})
	results := &Z_Thinger_OneReturnResults{}

	if err := c.client.Call("Plugin.OneReturn", params, results); err != nil {
		log.Println("RPC call to Thinger.OneReturn failed:", err.Error())
	}

	return results.R0
}

// OneReturn implements the server side of net/rpc calls to OneReturn.
func (s *ThingerRPCServer) OneReturn(_ interface{}, results *Z_Thinger_OneReturnResults) error {
	r0 := s.impl.OneReturn()

	results.R0 = r0

	return nil
}

// Simple implements Simple for the Thinger interface.
func (c *ThingerRPCClient) Simple() {
	params := new(interface{})
	results := new(interface{})

	if err := c.client.Call("Plugin.Simple", params, results); err != nil {
		log.Println("RPC call to Thinger.Simple failed:", err.Error())
	}
}

// Simple implements the server side of net/rpc calls to Simple.
func (s *ThingerRPCServer) Simple(_ interface{}, _ *interface{}) error {
	s.impl.Simple()

	return nil
}

// Z_Thinger_StringResults contains results for the String function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_StringResults struct {
	R0 string
}

// String implements String for the Thinger interface.
func (c *ThingerRPCClient) String() string {
	params := new(interface{})
	results := &Z_Thinger_StringResults{}

	if err := c.client.Call("Plugin.String", params, results); err != nil {
		log.Println("RPC call to Thinger.String failed:", err.Error())
	}

	return results.R0
}

// String implements the server side of net/rpc calls to String.
func (s *ThingerRPCServer) String(_ interface{}, results *Z_Thinger_StringResults) error {
	r0 := s.impl.String()

	results.R0 = r0

	return nil
}

// Z_Thinger_TwoArgsParams contains parameters for the TwoArgs function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_TwoArgsParams struct {
	P0 *int
	P1 string
}

// TwoArgs implements TwoArgs for the Thinger interface.
func (c *ThingerRPCClient) TwoArgs(p0 *int, p1 string) {
	params := &Z_Thinger_TwoArgsParams{
		P0: p0,
		P1: p1,
	}
	results := new(interface{})

	if err := c.client.Call("Plugin.TwoArgs", params, results); err != nil {
		log.Println("RPC call to Thinger.TwoArgs failed:", err.Error())
	}
}

// TwoArgs implements the server side of net/rpc calls to TwoArgs.
func (s *ThingerRPCServer) TwoArgs(params *Z_Thinger_TwoArgsParams, _ *interface{}) error {
	s.impl.TwoArgs(params.P0, params.P1)

	return nil
}

// Z_Thinger_TwoArgsTwoReturnsParams contains parameters for the TwoArgsTwoReturns function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_TwoArgsTwoReturnsParams struct {
	P0 byte
	P1 []byte
}

// Z_Thinger_TwoArgsTwoReturnsResults contains results for the TwoArgsTwoReturns function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_TwoArgsTwoReturnsResults struct {
	R0 int
	R1 string
}

// TwoArgsTwoReturns implements TwoArgsTwoReturns for the Thinger interface.
func (c *ThingerRPCClient) TwoArgsTwoReturns(p0 byte, p1 []byte) (int, string) {
	params := &Z_Thinger_TwoArgsTwoReturnsParams{
		P0: p0,
		P1: p1,
	}
	results := &Z_Thinger_TwoArgsTwoReturnsResults{}

	if err := c.client.Call("Plugin.TwoArgsTwoReturns", params, results); err != nil {
		log.Println("RPC call to Thinger.TwoArgsTwoReturns failed:", err.Error())
	}

	return results.R0, results.R1
}

// TwoArgsTwoReturns implements the server side of net/rpc calls to TwoArgsTwoReturns.
func (s *ThingerRPCServer) TwoArgsTwoReturns(params *Z_Thinger_TwoArgsTwoReturnsParams, results *Z_Thinger_TwoArgsTwoReturnsResults) error {
	r0, r1 := s.impl.TwoArgsTwoReturns(params.P0, params.P1)

	results.R0 = r0
	results.R1 = r1

	return nil
}

// Z_Thinger_TwoReturnsResults contains results for the TwoReturns function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_TwoReturnsResults struct {
	R0 int
	R1 bool
}

// TwoReturns implements TwoReturns for the Thinger interface.
func (c *ThingerRPCClient) TwoReturns() (int, bool) {
	params := new(interface{})
	results := &Z_Thinger_TwoReturnsResults{}

	if err := c.client.Call("Plugin.TwoReturns", params, results); err != nil {
		log.Println("RPC call to Thinger.TwoReturns failed:", err.Error())
	}

	return results.R0, results.R1
}

// TwoReturns implements the server side of net/rpc calls to TwoReturns.
func (s *ThingerRPCServer) TwoReturns(_ interface{}, results *Z_Thinger_TwoReturnsResults) error {
	r0, r1 := s.impl.TwoReturns()

	results.R0 = r0
	results.R1 = r1

	return nil
}

// Z_Thinger_VariadicParams contains parameters for the Variadic function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Thinger_VariadicParams struct {
	P0 string
	P1 []int
}

// Variadic implements Variadic for the Thinger interface.
func (c *ThingerRPCClient) Variadic(p0 string, p1 ...int) {
	params := &Z_Thinger_VariadicParams{
		P0: p0,
		P1: p1,
	}
	results := new(interface{})

	if err := c.client.Call("Plugin.Variadic", params, results); err != nil {
		log.Println("RPC call to Thinger.Variadic failed:", err.Error())
	}
}

// Variadic implements the server side of net/rpc calls to Variadic.
func (s *ThingerRPCServer) Variadic(params *Z_Thinger_VariadicParams, _ *interface{}) error {
	s.impl.Variadic(params.P0, params.P1...)

	return nil
}

// Z_Interface0Plugin implements the Plugin interface for Z_Interface0.
type Z_Interface0Plugin struct {
	impl interface {
		Replace(string) string
	}
}

func NewZ_Interface0Plugin(impl interface {
	Replace(string) string
}) *Z_Interface0Plugin {
	return &Z_Interface0Plugin{impl: impl}
}

var _ goplugin.Plugin = (*Z_Interface0Plugin)(nil) // Compile-time check that Z_Interface0Plugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *Z_Interface0Plugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewZ_Interface0RPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *Z_Interface0Plugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewZ_Interface0RPCClient(b, c), nil
}

// Z_Interface0RPCClient implements Z_Interface0 via net/rpc.
type Z_Interface0RPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewZ_Interface0RPCClient(b *goplugin.MuxBroker, c *rpc.Client) *Z_Interface0RPCClient {
	return &Z_Interface0RPCClient{
		broker: b,
		client: c,
	}
}

var _ interface {
	Replace(string) string
} = (*Z_Interface0RPCClient)(nil)

// Z_Interface0RPCServer implements the net/rpc server for Z_Interface0.
type Z_Interface0RPCServer struct {
	broker *goplugin.MuxBroker
	impl   interface {
		Replace(string) string
	}
}

func NewZ_Interface0RPCServer(b *goplugin.MuxBroker, impl interface {
	Replace(string) string
}) *Z_Interface0RPCServer {
	return &Z_Interface0RPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Z_Interface0_ReplaceParams contains parameters for the Replace function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Z_Interface0_ReplaceParams struct {
	P0 string
}

// Z_Z_Interface0_ReplaceResults contains results for the Replace function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Z_Interface0_ReplaceResults struct {
	R0 string
}

// Replace implements Replace for the Z_Interface0 interface.
func (c *Z_Interface0RPCClient) Replace(p0 string) string {
	params := &Z_Z_Interface0_ReplaceParams{P0: p0}
	results := &Z_Z_Interface0_ReplaceResults{}

	if err := c.client.Call("Plugin.Replace", params, results); err != nil {
		log.Println("RPC call to Z_Interface0.Replace failed:", err.Error())
	}

	return results.R0
}

// Replace implements the server side of net/rpc calls to Replace.
func (s *Z_Interface0RPCServer) Replace(params *Z_Z_Interface0_ReplaceParams, results *Z_Z_Interface0_ReplaceResults) error {
	r0 := s.impl.Replace(params.P0)

	results.R0 = r0

	return nil
}

// ReaderPlugin implements the Plugin interface for Reader.
type ReaderPlugin struct {
	impl io.Reader
}

func NewReaderPlugin(impl io.Reader) *ReaderPlugin {
	return &ReaderPlugin{impl: impl}
}

var _ goplugin.Plugin = (*ReaderPlugin)(nil) // Compile-time check that ReaderPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *ReaderPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewReaderRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *ReaderPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewReaderRPCClient(b, c), nil
}

// ReaderRPCClient implements Reader via net/rpc.
type ReaderRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewReaderRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *ReaderRPCClient {
	return &ReaderRPCClient{
		broker: b,
		client: c,
	}
}

var _ io.Reader = (*ReaderRPCClient)(nil)

// ReaderRPCServer implements the net/rpc server for Reader.
type ReaderRPCServer struct {
	broker *goplugin.MuxBroker
	impl   io.Reader
}

func NewReaderRPCServer(b *goplugin.MuxBroker, impl io.Reader) *ReaderRPCServer {
	return &ReaderRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Reader_ReadParams contains parameters for the Read function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Reader_ReadParams struct {
	P0 []byte
}

// Z_Reader_ReadResults contains results for the Read function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Reader_ReadResults struct {
	R0 int
	R1 error
}

// Read implements Read for the Reader interface.
func (c *ReaderRPCClient) Read(p0 []byte) (int, error) {
	params := &Z_Reader_ReadParams{P0: p0}
	results := &Z_Reader_ReadResults{}

	if err := c.client.Call("Plugin.Read", params, results); err != nil {
		log.Println("RPC call to Reader.Read failed:", err.Error())
	}

	return results.R0, results.R1
}

// Read implements the server side of net/rpc calls to Read.
func (s *ReaderRPCServer) Read(params *Z_Reader_ReadParams, results *Z_Reader_ReadResults) error {
	r0, r1 := s.impl.Read(params.P0)

	results.R0 = r0
	results.R1 = goplugin.NewBasicError(r1)

	return nil
}

// WriterPlugin implements the Plugin interface for Writer.
type WriterPlugin struct {
	impl io.Writer
}

func NewWriterPlugin(impl io.Writer) *WriterPlugin {
	return &WriterPlugin{impl: impl}
}

var _ goplugin.Plugin = (*WriterPlugin)(nil) // Compile-time check that WriterPlugin is a Plugin.

// Server implements the Server method for the Plugin interface.
func (p *WriterPlugin) Server(b *goplugin.MuxBroker) (interface{}, error) {
	return NewWriterRPCServer(b, p.impl), nil
}

// Client implements the Client method for the Plugin interface.
func (p *WriterPlugin) Client(b *goplugin.MuxBroker, c *rpc.Client) (interface{}, error) {
	return NewWriterRPCClient(b, c), nil
}

// WriterRPCClient implements Writer via net/rpc.
type WriterRPCClient struct {
	broker *goplugin.MuxBroker
	client *rpc.Client
}

func NewWriterRPCClient(b *goplugin.MuxBroker, c *rpc.Client) *WriterRPCClient {
	return &WriterRPCClient{
		broker: b,
		client: c,
	}
}

var _ io.Writer = (*WriterRPCClient)(nil)

// WriterRPCServer implements the net/rpc server for Writer.
type WriterRPCServer struct {
	broker *goplugin.MuxBroker
	impl   io.Writer
}

func NewWriterRPCServer(b *goplugin.MuxBroker, impl io.Writer) *WriterRPCServer {
	return &WriterRPCServer{
		broker: b,
		impl:   impl,
	}
}

// Z_Writer_WriteParams contains parameters for the Write function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Writer_WriteParams struct {
	P0 []byte
}

// Z_Writer_WriteResults contains results for the Write function.
// It is exported for compatibility with net/rpc and should not be used directly.
type Z_Writer_WriteResults struct {
	R0 int
	R1 error
}

// Write implements Write for the Writer interface.
func (c *WriterRPCClient) Write(p0 []byte) (int, error) {
	params := &Z_Writer_WriteParams{P0: p0}
	results := &Z_Writer_WriteResults{}

	if err := c.client.Call("Plugin.Write", params, results); err != nil {
		log.Println("RPC call to Writer.Write failed:", err.Error())
	}

	return results.R0, results.R1
}

// Write implements the server side of net/rpc calls to Write.
func (s *WriterRPCServer) Write(params *Z_Writer_WriteParams, results *Z_Writer_WriteResults) error {
	r0, r1 := s.impl.Write(params.P0)

	results.R0 = r0
	results.R1 = goplugin.NewBasicError(r1)

	return nil
}

// PluginHandshake is a plugin handshake generated from the input interfaces.
var PluginHandshake = goplugin.HandshakeConfig{
	MagicCookieKey:   "PLUGINGEN_MAGIC_COOKIE_KEY",
	MagicCookieValue: "41dcc97f763e77183357050c0e91a39c",
	ProtocolVersion:  1,
}
