package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/build"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
	"golang.org/x/tools/go/loader"
)

var (
	typeNames  = flag.String("type", "", "comma-separated list of type names; must be set")
	output     = flag.String("output", "", "output file name (or - for stdout); default <srcdir>/plugingen.go")
	buildTags  = flag.String("tags", "", "comma-separated list of build tags to apply")
	allowerror = flag.Bool("allowerror", false, "don't wrap errors with plugin.BasicError")
	subpkg     = flag.String("subpkg", "", "subpackage name for generated code; if specified, output will be written to <srcdir>/<subpkg>/<output>")
	rpcpanic   = flag.Bool("panicrpc", false, "panic on RPC call errors")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tplugingen [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tplugingen [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("plugingen: ")
	flag.Usage = Usage
	flag.Parse()

	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	var tags []string
	if len(*buildTags) > 0 {
		tags = strings.Split(*buildTags, ",")
	}

	conf := loader.Config{
		Build:               buildContext(tags),
		TypeCheckFuncBodies: func(string) bool { return false },
	}

	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	var dir string
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		conf.Import(dir)
	} else {
		if len(tags) != 0 {
			log.Fatal("-tags option applies only to directories, not when files are specified")
		}
		dir = filepath.Dir(args[0])
		conf.CreateFromFilenames("", args...)
	}

	lprog, err := conf.Load()
	if err != nil {
		log.Fatal(err)
	}

	pkg := lprog.InitialPackages()[0].Pkg

	analyzer := NewAnalyzer()

	splat := strings.Split(*typeNames, ",")
	ifaces := make([]types.Type, len(splat))

	for i, name := range splat {
		obj := pkg.Scope().Lookup(name)
		if obj == nil {
			log.Fatalf("%s.%s not found", pkg.Path(), name)
		}
		ifaces[i] = obj.Type()
	}

	analyzer.analyzeAll(ifaces)

	pkgPath := pkg.Path()
	if *subpkg != "" {
		pkgPath += "/" + *subpkg
		dir = filepath.Join(dir, *subpkg)
	}

	file := jen.NewFilePath(pkgPath)
	file.PackageComment(fmt.Sprintf("// Code generated by \"plugingen %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " ")))

	g := NewGenerator(file)
	g.generate(analyzer.interfaces)

	var buf bytes.Buffer
	if err := file.Render(&buf); err != nil {
		log.Fatal(err)
	}

	outputName := *output

	if outputName == "-" {
		_, err = buf.WriteTo(os.Stdout)
	} else {
		if err := os.MkdirAll(dir, 0700); err != nil {
			log.Fatal(err)
		}

		if outputName == "" {
			outputName = filepath.Join(dir, "plugingen.go")
		}

		err = ioutil.WriteFile(outputName, buf.Bytes(), 0644)
	}

	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

func buildContext(tags []string) *build.Context {
	ctx := build.Default
	ctx.BuildTags = tags
	return &ctx
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}
